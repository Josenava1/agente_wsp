const express = require('express');
const { Client, RemoteAuth } = require('whatsapp-web.js');
const { createClient } = require('@supabase/supabase-js');
const axios = require('axios');

// --- 1. CONFIGURACIÓN DE SUPABASE ---
// Toma las credenciales desde las variables de entorno de Render
const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_KEY;

if (!supabaseUrl || !supabaseKey) {
    throw new Error("Las variables de entorno de Supabase (URL y KEY) son requeridas.");
}
const supabase = createClient(supabaseUrl, supabaseKey);

// --- 2. CREACIÓN DE UN ALMACÉN DE SESIÓN PERSONALIZADO CON SUPABASE ---
class SupabaseAuthStore {
    async save(data) {
        // 'upsert' crea la fila si no existe, o la actualiza si ya existe.
        const { error } = await supabase
            .from('sessions')
            .upsert({ session_id: data.session, session_data: JSON.stringify(data) });

        if (error) {
            console.error("Error al guardar la sesión en Supabase:", error);
        } else {
            console.log("Sesión guardada en Supabase.");
        }
    }

    async extract(session) {
        const { data, error } = await supabase
            .from('sessions')
            .select('session_data')
            .eq('session_id', session)
            .single();

        if (error || !data) {
            console.error("Error al extraer la sesión o no se encontró:", error);
            return null;
        }
        
        console.log("Sesión extraída de Supabase.");
        return JSON.parse(data.session_data);
    }

    async delete(session) {
        const { error } = await supabase
            .from('sessions')
            .delete()
            .eq('session_id', session);

        if (error) {
            console.error("Error al eliminar la sesión:", error);
        }
    }
}

// --- 3. CONFIGURACIÓN DEL CLIENTE DE WHATSAPP CON REMOTEAUTH ---
const store = new SupabaseAuthStore();

const client = new Client({
    authStrategy: new RemoteAuth({
        sessionID: 'bot-principal', // Un nombre para identificar esta sesión en la DB
        store: store,
        backupSyncIntervalMs: 300000 // Guarda la sesión en Supabase cada 5 minutos
    }),
    puppeteer: {
        args: ['--no-sandbox', '--disable-setuid-sandbox'],
    }
});

// El resto del código (Express, eventos de cliente, etc.) permanece igual
// que en la versión anterior.

// Servidor de Express para mantener vivo el bot en Render
const app = express();
const PORT = process.env.PORT || 3000;
app.get('/', (req, res) => {
  res.send('WhatsApp Bot con Supabase está activo.');
});
app.listen(PORT, () => console.log(`Servidor escuchando en el puerto ${PORT}`));

// Eventos del cliente
client.on('qr', qr => {
    console.log('--------------------------------------------------');
    console.log('ESCANEAME! Ve los logs de Render para el QR Code.');
    const qrcode = require('qrcode-terminal');
    qrcode.generate(qr, { small: true });
});

client.on('remote_session_saved', () => {
    console.log('¡La sesión se guardó remotamente en Supabase!');
});

client.on('ready', () => {
    console.log('¡CLIENTE LISTO Y CONECTADO!');
});

client.on('message', async message => {
    const n8nWebhookUrl = process.env.N8N_WEBHOOK_URL;
    if (!n8nWebhookUrl) return;

    try {
        await axios.post(n8nWebhookUrl, { from: message.from, text: message.body });
    } catch (error) {
        console.error(`Error al enviar el webhook a n8n: ${error.message}`);
    }
});

client.initialize();
